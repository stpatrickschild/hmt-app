{"version":3,"sources":["components/About.js","components/Insurancefinder.js","components/SelectDropDown.js","components/ProvidersCost.js","components/Resources.js","components/MedicalPriceTransparency.js","components/NoMatch.js","components/Layout.js","components/NavigationBar.js","components/Jumbotron.js","App.js","serviceWorker.js","index.js","assets/happypplImage.jpg"],"names":["About","InsuranceFinder","href","useStyles","makeStyles","theme","formControl","margin","spacing","minWidth","selectEmpty","marginTop","SelectDropDown","classes","React","useState","provider","setProvider","specialty","setSpecialty","providersList","setProvidersList","category","setCategory","categoryList","setCategoryList","cost","setCost","specialtysList","setSpecialtysList","isSelected","a","b","id","selected","findCategoryById","find","toString","reloadProviders","useCallback","axios","get","then","response","data","reloadCategories","console","log","reloadSpecialtys","reloadCost","in_network_cost","inNetworkCost","out_of_network_cost","outOfNetworkCost","uninsured_cost","uninsuredCost","useEffect","FormControl","className","onChange","event","target","value","InputLabel","htmlFor","NativeSelect","defaultValue","inputProps","name","map","p","key","FormHelperText","c","Button","variant","color","onClick","ProvidersCost","Resources","MedicalPriceTransparency","NoMatch","Layout","props","Container","children","Styles","styled","div","NavigationBar","Navbar","expand","Brand","Toggle","aria-controls","Collapse","Nav","Item","Link","happypplImage","Jumbotron","fluid","App","Fragment","exact","path","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.868a4ad2.chunk.js","sourcesContent":["import React from 'react';\n\n\n\n\n// class AboutComponent extends Component {\n//   render() {\n//     return (\n//       <div className=\"AboutComponent\">\n//         About Component\n//       </div>\n//     );\n//   }\n// }\n\nexport const About = () => (\n  <div>\n    <h2>About Us </h2>\n    <p>Why I choose this project is: - I am seeing there is a problem with access to healthcare because people are afraid to get treatment because they are afraid they can’t afford it, or they get treatment and then it causes secondary problems because they can’t afford to pay for it, and it cause this other thing beside health and that stress can impact their outcomes, it can impact their likelihood seeking follow up care. I want to prevent a lot of that by being transparent. My only fear is the DB to maintain and make sure its honest. </p>\n    <h2>What is Concierge Medicine </h2>\n    <p>Concierge Medicine (also known as retainer medicine) is a relationship between a patient and primary care physician in which the patient pays an annual fee or retainer. In exchange for the retainer, doctors agree to provider enhanced care, including principally a commitment to limit patient loads to ensure adequate time and availability for each patient.  </p>\n    <p>Why I choose this project is: - I am seeing there is a problem with access to healthcare because people are afraid to get treatment because they are afraid they can’t afford it, or they get treatment and then it causes secondary problems because they can’t afford to pay for it, and it cause this other thing beside health and that stress can impact their outcomes, it can impact their likelihood seeking follow up care. I want to prevent a lot of that by being transparent. My only fear is the DB to maintain and make sure its honest. </p>\n  </div>\n)\nexport default About;","import React from 'react';\n\n\n// //Function Component\n// function InsuranceFinderComponent ()  {\n//   return (\n//     <div className=\"InsuranceFinderComponent\">\n//       Insurance Finder Component\n//     </div>\n//   );\n// };\nexport const InsuranceFinder = () => (\n  <div>\n    <h2>Finder your Health Insurance Provider</h2>\n    \n    \n    <a href=\"https://www.ehealthinsurance.com/individual-family-health-insurance?allid=goo9664000&sid=IFPHI77479&s_kwcid=AL%214462%213%21431384338497%21b%21%21g%21%21%2Bhealthinsurance%3F&gclid=CjwKCAjwjLD4BRAiEiwAg5NBFkEzEIIk_GbEB_6a6wxfwpmxrt4ha2pzMnUaybMc0ob9DQ4DcJ-CnhoC97MQAvD_BwE#applicant\">Health Insurance Plans - Quote, Compare & Enroll</a>\n  </div>\n)\n\nexport default InsuranceFinder;","\nimport React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport NativeSelect from '@material-ui/core/NativeSelect';\n\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nfunction SelectDropDown() {\n  const classes = useStyles();\n  const [state, setState] = React.useState({\n\n  });\n\n  const handleChange = (event) => {\n    const name = event.target.name;\n    setState({\n      ...state,\n      [name]: event.target.value,\n    });\n  };\n\n  const [provider, setProvider] = useState(null);\n  const [specialty, setSpecialty] = useState(null);\n  const [providersList, setProvidersList] = useState([]);\n  const [category, setCategory] = useState(null);\n  const [categoryList, setCategoryList] = useState([]);\n  const [cost, setCost] = useState(null);\n  const [specialtysList, setSpecialtysList] = useState([])\n\n  const isSelected = (a, b) => {\n    if (!a) return {};\n    if (a.id === b.id) return { selected: \"selected\" };\n    return {};\n  }\n\n\n  const resetApp = () => {\n    setProvider(null);\n    setSpecialty(null);\n    setCategory(null);\n    setCost(null);\n  }\n\n  const findProviderById = (id) => {\n    return providersList.find((provider) => {\n      return provider.id.toString() === id\n    })\n  }\n  const providerChanged = (event) => {\n    setProvider(findProviderById(event.target.value))\n  }\n\n  const findSpecialtyById = (id) => {\n    return specialtysList.find((specialty) => {\n      return specialty.id.toString() === id\n    })\n  }\n  const specialtyChanged = (event) => {\n    setSpecialty(findSpecialtyById(event.target.value))\n  }\n\n  const categoryChanged = (event) => {\n    setCategory(findCategoryById(event.target.value))\n  }\n\n  const findCategoryById = (id) => {\n    return categoryList.find((category) => {\n      return category.id.toString() === id\n    })\n  }\n\n\n\n  const reloadProviders = useCallback(() => {\n    axios.get(\"http://34.66.52.51:80/provider\")\n      .then((response) => {\n        setProvidersList(response.data)\n      })\n  }, []);\n\n  const reloadCategories = useCallback(() => {\n    if (!provider) return;\n    axios.get(`http://34.66.52.51:80/provider/${provider.id}/categories`)\n      .then((response) => {\n        console.log(response.data)\n        setCategoryList(response.data)\n      })\n  }, [provider]);\n\n  const reloadSpecialtys = useCallback(() => {\n    if (!category) return;\n    axios.get(`http://34.66.52.51:80/provider/${provider.id}/categories/${category.id}/specialties`)\n      .then((response) => {\n        setSpecialtysList(response.data)\n      })\n  }, [provider, category]);\n\n  const reloadCost = useCallback(() => {\n    if (!specialty) return;\n    setCost({ in_network_cost: specialty.inNetworkCost, out_of_network_cost: specialty.outOfNetworkCost, uninsured_cost: specialty.uninsuredCost })\n  }, [specialty]);\n\n  useEffect(() => {\n    reloadProviders()\n  }, [reloadProviders]);\n\n  useEffect(() => {\n    reloadSpecialtys()\n  }, [reloadSpecialtys, category]);\n\n  useEffect(() => {\n    reloadCost()\n  }, [reloadCost, specialty]);\n\n  useEffect(() => {\n    reloadCategories()\n  }, [reloadCategories, provider])\n\n  // const classes = useStyles();\n\n\n  return (\n    <div>\n\n      <FormControl className={classes.formControl} onChange={providerChanged}>\n        <InputLabel htmlFor=\"uncontrolled-native\">Provider</InputLabel>\n        <NativeSelect\n          defaultValue={\"\"}\n          inputProps={{\n            name: 'Select your Provider',\n            id: 'uncontrolled-native',\n          }}\n\n        >\n          <option value=\"\"></option>\n          {providersList.map((p) => (\n            <option key={p.id} value={p.id} {...isSelected(provider, p)}>{p.name}</option>\n          ))}\n        </NativeSelect>\n\n        <FormHelperText>Select Your Provider</FormHelperText>\n      </FormControl>\n\n      <FormControl className={classes.formControl} onChange={categoryChanged}>\n        <InputLabel htmlFor=\"uncontrolled-native\">Category</InputLabel>\n        <NativeSelect\n          defaultValue={\"\"}\n          inputProps={{\n            name: 'Select your Category',\n            id: 'uncontrolled-native',\n          }}>\n          <option value=\"\"></option>\n          {categoryList.map((c) => (\n            <option key={c.id} value={c.id} {...isSelected(category, c)}>{c.name}</option>\n          ))}\n        </NativeSelect>\n        <FormHelperText>Select Your Category</FormHelperText>\n      </FormControl>\n\n      <FormControl className={classes.formControl} onChange={specialtyChanged}>\n        <InputLabel htmlFor=\"uncontrolled-native\">Specialty</InputLabel>\n        <NativeSelect\n          defaultValue={\"\"}\n          inputProps={{\n            name: 'Select your Specialty',\n            id: 'uncontrolled-native',\n          }}\n\n        >\n          <option value=\"\"></option>\n          {specialtysList.map((p) => (\n            <option key={p.id} value={p.id} {...isSelected(specialty, p)}>{p.name}</option>\n          ))}\n        </NativeSelect>\n        <FormHelperText>Select Your Specialty</FormHelperText>\n      </FormControl>\n\n      <p>Selected Specialty: {specialty?.name}</p>\n      <p>In Network Cost: {cost?.in_network_cost}</p>\n      <p>Out of Network Cost: {cost?.out_of_network_cost}</p>\n      <p>Uninsured Cost: {cost?.uninsured_cost}</p>\n      <Button variant=\"contained\" color=\"primary\" onClick={resetApp}>Reset</Button>\n\n    </div>\n  );\n}\nexport default SelectDropDown;","import React from 'react';\nimport  SelectDropDown  from './SelectDropDown.js'\n\n// //Class Component\n// class ProvidersCostComponent extends Component {\n//   render() {\n//     return (\n//       <div className=\"Providers-CostComponent\">\n//         Providers Cost Component\n//       </div>\n//     );\n//   }\n// }\nexport const ProvidersCost = () => (\n  <div>\n    <h2>See your Health Care Cose with your Insurance Provider </h2>\n    <p>What do you think your Specialty's cost it? </p>\n    <SelectDropDown></SelectDropDown>\n  </div>\n)\n\nexport default ProvidersCost;","import React from 'react';\n\n//  //Function Component\n//  function ResourcesComponent ()  {\n//   return (\n//     <div className=\"ResourcesComponent\">\n//       Resources Component\n//     </div>\n//   );\n// };\n\nexport const Resources = () => (\n  <div>\n    <h2>Apply for or renew coverage | Washington State Health Care   </h2>\n    <a href=\"https://www.hca.wa.gov/health-care-services-supports/apple-health-medicaid-coverage/apply-or-renew-coverage\">Apply here</a>\n\n    <h2>Financial Assistance at Swedish  </h2>\n    <a href=\"https://www.swedish.org/~/media/files/providence%20swedish/pdfs/patients%20visitors/finaid/plain%20language%20summary%20english.pdf\">Download the Form here</a>\n\n  </div>\n)\nexport default Resources;","import React from 'react';\nimport './MedicalPriceTransparency.css'\n\n\n// class MedicalPriceTransparency  extends Component {\n  \n \n//   render () {\n//     return (\n//       <div className=\"medicalpricetransparency\">\n//         <button>Medical Price Transparency</button>\n        \n//       </div>\n//       );\n//   };\n// }\nexport const MedicalPriceTransparency = () => (\n  <div>\n    <h2>MPT Vision </h2>\n    <p>Why I choose this project is: - I am seeing there is a problem with access to healthcare because people are afraid to get treatment because they are afraid they can’t afford it, or they get treatment and then it causes secondary problems because they can’t afford to pay for it, and it cause this other thing beside health and that stress can impact their outcomes, it can impact their likelihood seeking follow up care. I want to prevent a lot of that by being transparent. My only fear is the DB to maintain and make sure its honest. </p>\n    <h2>Patients </h2>\n    <h5>know your rights</h5>\n    <p>Back in 1998, the US Advisory Commission on Consumer Protection and Quality in the Health Care Industry adopted what is familiarly known as “The Patient’s Bill of Rights.” This bill was updated in 2010 along side the Affordable Care Act (ACA), but the original basic tenets have remained the same. </p>\n    <h5>Figure out where and when you need to enroll</h5>\n    <p>Depending where you live, you can either use the federal exchanges on HealthCare.gov or your state's marketplace to shop for insurance. Washington State runs it's own exchanges. The federal exchange open enrollment runs until mid-December, but you might have more time if you live in a state that runs its own marketplace.</p>\n    <h5>Compare estimated yearly costs, not just monthly premiums</h5>\n    <p>It's easy to focus on the monthly premium payment when comparing plans, but don't forget to consider other costs as well.</p>\n    <p>The premium price is prominently featured when you're looking at plans, but look at other costs too. A tool available on HealthCare.gov and some state marketplaces will calculate \"estimated total yearly costs\" for you. This takes into account the plan's deductible — how much you have to pay out-of-pocket for covered services before your insurance picks up the tab — and copays, put together with how much health care you expect to use in the coming year.</p>\n    <h5>Consider how much health care you use</h5>\n    <p>Picking the right insurance plan involves guesswork about how many health issues you're likely to face in the coming year, which could affect the way costs break down. Your age is usually a useful proxy for this, but there's always a lot of unknowns, like a surprise cancer diagnosis or a car accident.</p>\n    <h5>Get free help from the pros</h5>\n    <p>Insurance Brokers are experts who can help you shop for plans, understand financial help, and get you enrolled. Navigators can help you get enrolled and answer any general questions you have about your health insurance options or the application process. Help from brokers and navigators are typically free for people of any income level. </p>\n    <h2>Doctors and Health Care Providers </h2>\n    <p>Why did you become health care providers, let's go back to the root of the reason </p>\n    <p>Why did you become health care providers, let's go back to the root of the reason </p>\n    <h2>Insurance Companies </h2>\n    <p>Why do you exist, and why isn't Goverment interfering with what you are doing </p>\n    <p>Why do you exist, and why isn't Goverment interfering with what you are doing </p>\n  </div>\n)\n\nexport default MedicalPriceTransparency;","import React from 'react';\n\nexport const NoMatch = () => (\n  <div>\n    <h2>No Match</h2>\n  </div>\n)","import React from 'react';\n// import Container from 'react-bootstrap/Container'; \nimport { Container } from 'react-bootstrap';\n\nexport const Layout = (props) => (\n  <Container>\n    {props.children}\n  </Container>\n)","import React from 'react';\nimport { Nav, Navbar } from  'react-bootstrap';\nimport styled from 'styled-components';\n\nconst Styles = styled.div`\n  .navbar {\n    backgroud-color: #222;\n  }\n  \n  .navbar-brand, .navbar-nav .nav-link {\n    color:  #bbb;\n\n    &:hover {\n      color: white;\n    }\n  }\n`;\n\n\n\nconst NavigationBar = () => (\n  <Styles>\n    <Navbar expand='lg'>\n      <Navbar.Brand href=\"/\">M P T </Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"ml-auto\">\n          <Nav.Item><Nav.Link href=\"/\">MedicalPriceTransparancy</Nav.Link></Nav.Item>\n          <Nav.Item><Nav.Link href=\"/about\">About</Nav.Link></Nav.Item>\n          <Nav.Item><Nav.Link href=\"/providerscost\">ProvidersCost</Nav.Link></Nav.Item>\n          <Nav.Item><Nav.Link href=\"/insurancefinder\">InsuranceFinder</Nav.Link></Nav.Item>\n          <Nav.Item><Nav.Link href=\"/resources\">Resources</Nav.Link></Nav.Item>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  </Styles>\n);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexport default NavigationBar;","import React from 'react';\nimport { Jumbotron as Jumbo, Container } from 'react-bootstrap';\nimport Styled from 'styled-components';\nimport happypplImage from '../assets/happypplImage.jpg';\n// import { happypplImage } from './assets/happypplImage.jpg';\nimport styled from 'styled-components';\n\nconst Styles = styled.div`\n  .jumbo {\n    background: url(${happypplImage}) no-repeat fixed bottom;\n    background-size: cover;\n    color: #efefef;\n    height: 400px;\n    position: relative;\n    z-index: -2;\n  }\n\n  .overlay {\n    background-color: #000;\n    opacity: 0.6;\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    z-index: -1;\n  }\n`;\nconsole.log(happypplImage)\n\nexport const Jumbotron = () => (\n  <Styles>\n    <Jumbo fluid className= \"jumbo\">\n      <div className=\"overlay\"></div>\n      <Container>\n        <h1>Welcome to MPT</h1>\n        <p>A site where a student was inspired and has taken initiatives to create awareness on health care cost </p>\n        \n      </Container>\n    </Jumbo>\n  </Styles>\n)\n\nexport default Jumbotron;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { About } from './components/About';\nimport { InsuranceFinder } from './components/Insurancefinder';\nimport { ProvidersCost } from './components/ProvidersCost';\nimport { Resources } from './components/Resources';\nimport { MedicalPriceTransparency } from './components/MedicalPriceTransparency';\nimport { NoMatch } from './components/NoMatch';\nimport { Layout } from './components/Layout';\nimport NavigationBar from './components/NavigationBar';\nimport { Jumbotron } from './components/Jumbotron';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <NavigationBar />\n        <Jumbotron />\n        <Layout>\n          <Router>\n            <Switch>\n              <Route exact path=\"/\" component={MedicalPriceTransparency} />\n              <Route path=\"/about\" component={About} />\n              <Route path=\"/providerscost\" component={ProvidersCost} />\n              <Route path=\"/insurancefinder\" component={InsuranceFinder} />\n              <Route path=\"/resources\" component={Resources} />\n              <Route component={NoMatch} />\n            </Switch>\n          </Router>\n        </Layout>\n      </React.Fragment>\n    );\n  }\n}\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/happypplImage.10535061.jpg\";"],"sourceRoot":""}